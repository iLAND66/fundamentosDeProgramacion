
# Funciones de Manipulaci√≥n de Cadenas en C
## `<string.h>`: strcat(), strcpy(), strlen()

---

## üìã √çndice de la Presentaci√≥n

1. **Introducci√≥n a string.h**
2. **strlen() - Longitud de cadenas**
3. **strcpy() - Copia de cadenas**
4. **strcat() - Concatenaci√≥n de cadenas**
5. **Ejemplos pr√°cticos**
6. **Consideraciones de seguridad**
7. **Alternativas seguras**
8. **Ejercicios y casos de uso**

---

## 1. Introducci√≥n a string.h

### ¬øQu√© es string.h?
- **Biblioteca est√°ndar de C** para manipulaci√≥n de cadenas
- Contiene funciones para trabajar con arrays de caracteres terminados en `\0`
- **Incluir**: `#include <string.h>`

### Conceptos clave:
- **Cadena (string)**: Array de caracteres terminado en `\0`
- **Car√°cter nulo**: `\0` marca el final de la cadena
- **Punteros**: Las funciones trabajan con direcciones de memoria

---

## 2. strlen() - Longitud de Cadenas

### Sintaxis
```c
size_t strlen(const char *str);
```

### Caracter√≠sticas:
- **Prop√≥sito**: Calcular la longitud de una cadena
- **Retorna**: N√∫mero de caracteres (sin contar `\0`)
- **Tipo de retorno**: `size_t` (entero sin signo)
- **Par√°metro**: `const char *` (no modifica la cadena)

### Ejemplo b√°sico:
```c
#include <stdio.h>
#include <string.h>

int main() {
    char cadena[] = "Hola Mundo";
    size_t longitud = strlen(cadena);
    
    printf("La cadena '%s' tiene %zu caracteres\n", cadena, longitud);
    // Salida: La cadena 'Hola Mundo' tiene 10 caracteres
    
    return 0;
}
```

### Puntos importantes:
- **No cuenta** el car√°cter nulo `\0`
- **Eficiencia**: O(n) - recorre toda la cadena
- **Seguridad**: La cadena debe estar terminada en `\0`

---

## 3. strcpy() - Copia de Cadenas

### Sintaxis
```c
char *strcpy(char *destino, const char *origen);
```

### Caracter√≠sticas:
- **Prop√≥sito**: Copiar una cadena a otra
- **Retorna**: Puntero al destino
- **Modifica**: La cadena destino
- **No modifica**: La cadena origen (`const`)

### Ejemplo b√°sico:
```c
#include <stdio.h>
#include <string.h>

int main() {
    char origen[] = "Programaci√≥n";
    char destino[20];  // Suficiente espacio
    
    strcpy(destino, origen);
    
    printf("Origen: %s\n", origen);
    printf("Destino: %s\n", destino);
    
    return 0;
}
```

### Funcionamiento interno:
1. Copia car√°cter por car√°cter desde origen a destino
2. Incluye el car√°cter nulo `\0` al final
3. Sobrescribe completamente el contenido del destino

### ‚ö†Ô∏è Precauciones:
- **Buffer overflow**: Destino debe tener suficiente espacio
- **No verifica l√≠mites**: Puede causar errores graves
- **Cadenas superpuestas**: Comportamiento indefinido

---

## 4. strcat() - Concatenaci√≥n de Cadenas

### Sintaxis
```c
char *strcat(char *destino, const char *origen);
```

### Caracter√≠sticas:
- **Prop√≥sito**: A√±adir una cadena al final de otra
- **Retorna**: Puntero al destino
- **Modifica**: Solo la cadena destino
- **Busca**: El final de destino antes de concatenar

### Ejemplo b√°sico:
```c
#include <stdio.h>
#include <string.h>

int main() {
    char saludo[50] = "Hola ";     // Espacio suficiente
    char nombre[] = "Mar√≠a";
    
    strcat(saludo, nombre);
    strcat(saludo, "!");
    
    printf("Resultado: %s\n", saludo);
    // Salida: Resultado: Hola Mar√≠a!
    
    return 0;
}
```

### Funcionamiento interno:
1. Encuentra el final de la cadena destino (busca `\0`)
2. Copia la cadena origen a partir de esa posici√≥n
3. A√±ade el nuevo car√°cter nulo al final

### ‚ö†Ô∏è Precauciones:
- **Espacio suficiente**: Destino debe poder contener ambas cadenas
- **Inicializaci√≥n**: Destino debe ser una cadena v√°lida
- **Eficiencia**: O(n+m) donde n y m son las longitudes

---

## 5. Ejemplos Pr√°cticos

### Ejemplo 1: Constructor de nombres completos
```c
#include <stdio.h>
#include <string.h>

int main() {
    char nombre[20] = "Juan";
    char apellido[] = "P√©rez";
    char nombre_completo[50] = "";
    
    // Construir nombre completo
    strcpy(nombre_completo, nombre);
    strcat(nombre_completo, " ");
    strcat(nombre_completo, apellido);
    
    printf("Nombre completo: %s\n", nombre_completo);
    printf("Longitud total: %zu caracteres\n", strlen(nombre_completo));
    
    return 0;
}
```

### Ejemplo 2: An√°lisis de cadenas
```c
#include <stdio.h>
#include <string.h>

int main() {
    char frase[] = "Aprendiendo C es divertido";
    char copia[100];
    
    printf("Frase original: %s\n", frase);
    printf("Longitud: %zu caracteres\n", strlen(frase));
    
    // Hacer una copia
    strcpy(copia, frase);
    
    // A√±adir m√°s texto
    strcat(copia, " y √∫til");
    
    printf("Frase modificada: %s\n", copia);
    printf("Nueva longitud: %zu caracteres\n", strlen(copia));
    
    return 0;
}
```

### Ejemplo 3: Validaci√≥n de entrada
```c
#include <stdio.h>
#include <string.h>

int main() {
    char entrada[100];
    char mensaje[150] = "Usuario ingres√≥: ";
    
    printf("Ingrese su nombre: ");
    fgets(entrada, sizeof(entrada), stdin);
    
    // Remover el salto de l√≠nea si existe
    size_t len = strlen(entrada);
    if (len > 0 && entrada[len-1] == '\n') {
        entrada[len-1] = '\0';
    }
    
    // Validar longitud
    if (strlen(entrada) > 0) {
        strcat(mensaje, entrada);
        printf("%s\n", mensaje);
    } else {
        printf("Entrada vac√≠a\n");
    }
    
    return 0;
}
```

---

## 6. Consideraciones de Seguridad

### Problemas comunes:

#### Buffer Overflow
```c
// ‚ùå PELIGROSO
char pequeno[5];
strcpy(pequeno, "Esta cadena es muy larga");  // Desbordamiento!
```

#### Cadenas no inicializadas
```c
// ‚ùå PELIGROSO
char destino[20];  // Contenido impredecible
strcat(destino, "texto");  // Comportamiento indefinido
```

#### Cadenas superpuestas
```c
// ‚ùå PELIGROSO
char cadena[] = "Hola";
strcpy(cadena + 2, cadena);  // Comportamiento indefinido
```

### Buenas pr√°cticas:

#### Verificar tama√±os
```c
// ‚úÖ SEGURO
char destino[50];
char origen[] = "Texto seguro";

if (strlen(origen) < sizeof(destino)) {
    strcpy(destino, origen);
}
```

#### Inicializar destinos
```c
// ‚úÖ SEGURO
char destino[50] = "";  // Inicializar vac√≠o para strcat
strcat(destino, "Texto");
```

---

## 7. Alternativas Seguras

### Funciones m√°s seguras (C11):

#### strcpy_s() (Windows/C11)
```c
// M√°s seguro que strcpy
errno_t strcpy_s(char *destino, size_t tam_destino, const char *origen);
```

#### strncpy() - Versi√≥n con l√≠mite
```c
char destino[20];
strncpy(destino, origen, sizeof(destino) - 1);
destino[sizeof(destino) - 1] = '\0';  // Asegurar terminaci√≥n
```

#### strncat() - Concatenaci√≥n con l√≠mite
```c
char destino[50] = "Hola ";
strncat(destino, origen, sizeof(destino) - strlen(destino) - 1);
```

### Implementaci√≥n manual segura:
```c
// Funci√≥n personalizada segura
int strcpy_seguro(char *destino, const char *origen, size_t tam_max) {
    if (!destino || !origen || tam_max == 0) {
        return -1;  // Error
    }
    
    size_t i;
    for (i = 0; i < tam_max - 1 && origen[i] != '\0'; i++) {
        destino[i] = origen[i];
    }
    destino[i] = '\0';
    
    return 0;  // √âxito
}
```

---

## 8. Ejercicios Propuestos

### Ejercicio 1: Invertir cadenas
Crear una funci√≥n que use estas funciones para invertir una cadena.

### Ejercicio 2: Contador de palabras
Usar `strlen()` y otras funciones para contar palabras en una frase.

### Ejercicio 3: Constructor de rutas
Usar `strcat()` para construir rutas de archivos de forma segura.

### Ejercicio 4: Validador de entrada
Combinar las tres funciones para validar y procesar entrada del usuario.

---

## üìù Resumen Final

| Funci√≥n | Prop√≥sito | Retorna | Modifica destino | Seguridad |
|---------|-----------|---------|------------------|-----------|
| `strlen()` | Medir longitud | `size_t` | No | ‚úÖ Segura |
| `strcpy()` | Copiar cadena | `char*` | S√≠ | ‚ö†Ô∏è Cuidado |
| `strcat()` | Concatenar | `char*` | S√≠ | ‚ö†Ô∏è Cuidado |

### Puntos clave para recordar:
1. **Siempre verificar tama√±os** antes de copiar/concatenar
2. **Inicializar destinos** apropiadamente
3. **Considerar alternativas seguras** para aplicaciones cr√≠ticas
4. **Entender el comportamiento** de cada funci√≥n
5. **Practicar con ejemplos** variados

---

## ‚ùì Preguntas Frecuentes

**P: ¬øPor qu√© strlen() no cuenta el '\0'?**
R: Porque el '\0' es un marcador t√©cnico, no parte del contenido visible.

**P: ¬øQu√© pasa si el destino es muy peque√±o?**
R: Buffer overflow - comportamiento indefinido y potencialmente peligroso.

**P: ¬øPuedo usar estas funciones con char*?**
R: S√≠, pero aseg√∫rate de que apunten a memoria v√°lida y modificable.

**P: ¬øHay versiones seguras?**
R: S√≠: `strcpy_s()`, `strcat_s()`, `strncpy()`, `strncat()`
